openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MRCHRISCARLETON/BottomTime/1.0.0
  - description: Local development
    url: http://localhost:8080
  - description: Development/Staging
    url: https://api-dev.bottomti.me
  - description: Production
    url: https://api.bottomti.me

info:
  description: This is the API specifications for the Bottom Time application.
  version: '1.0.0'
  title: Bottom Time
  contact:
    email: mrchriscarleton@gmail.com
    name: Chris Carleton
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: Auth
    description: Routes used for authenticating and managing current user session
  - name: Dive Sites
    description: Routes used for managing and searching dive sites
  - name: Profiles
    description: Routes used for managing profiles
  - name: Tanks
    description: Routes used for managing pre-defined tanks
  - name: Users
    description: Routes used for managing users

paths:
  /auth/login:
    post:
      tags:
        - Auth
      security: []
      summary: Login
      operationId: loginUser
      description: Logs in a user given their username and password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - usernameOrEmail
                - password
              properties:
                usernameOrEmail:
                  type: string
                  description: The user's username or email address.
                  example: 'mike_42'
                password:
                  type: string
                  format: password
                  description: The user's password.
                  example: '*********'
      responses:
        '200':
          description: |
            Successful login! User account info will be returned and a session
            cookie will be set in the response header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationErrorResponse'
        '401':
          description: Login attempt failed due to invalid username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /auth/logout:
    get:
      tags:
        - Auth
      security:
        - Jwt: []
        - SessionCookie: []
      summary: Logout
      operationId: logoutUser
      description: Logs the current user out of their session and redirects back to the home page.
      responses:
        '302':
          description: Redirect back to home page with session cookie set.
          headers:
            Location:
              schema:
                type: string
                format: uri

  /auth/me:
    get:
      tags:
        - Auth
      security: []
      summary: Get current user
      operationId: getCurrentUser
      description: |
        Retrieves information on the currently logged in user.
      responses:
        200:
          description: Information on the currently logged in user (if any).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /profiles:
    get:
      tags:
        - Profiles
      summary: Search profiles
      operationId: searchProfiles
      description: |
        Search user profiles based on a search criteria. This query will only return profile information for users
        that are visible to the current user. (I.e. public profiles and friends-only profiles for users that are
        friends with the current user.)
      security: []
      parameters:
        - in: query
          name: query
          required: false
          description: |
            A search string to query for. If specified, this will be used to perform a text-based search for matching profiles.
          schema:
            type: string
        - in: query
          name: sortBy
          required: false
          description: |
            Indicates the field on which the results should be sorted. For text searches,
            the default is `relevance`; Otherwise, the default is `username`.
          schema:
            type: string
            enum:
              - relevance
              - username
              - memberSince
        - in: query
          name: sortOrder
          required: false
          description: |
            Indicates the order in which results will be returned. Default value is `asc`.
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: limit
          required: false
          description: |
            The maximum number of results to return in the query. This number must be a positive integer and can be no greater than `200`.
            The default value is `100`.
          example: 100
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
        - in: query
          name: skip
          required: false
          description: |
            The number of search hits to skip over before returning results. Use this for pagination.
            This number must be `0` or greater. The default is `0`.
          example: 200
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        200:
          description: The request completed successfully and the response body will contain the search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'

  /profiles/{username}:
    parameters:
      - $ref: '#/components/parameters/UsernameParameter'
    get:
      tags:
        - Profiles
      summary: Get profile
      operationId: getProfile
      security: []
      responses:
        200:
          description: The request succeeded and the response body will contain the profile info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    put:
      tags:
        - Profiles
      summary: Update profile
      operationId: updateProfile
      security:
        - Jwt: []
        - SessionCookie: []
      responses:
        204:
          description: Operation succeeded and profile information was updated.
        400:
          description: |
            The operation failed because the request body was malformed,
            invalid, or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was denied because the user is not an administrator
            and does not own the profile being updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the indicated username could not be
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    patch:
      tags:
        - Profiles
      summary: Patch profile
      operationId: patchProfile
      security:
        - Jwt: []
        - SessionCookie: []
      responses:
        204:
          description: |
            Operation succeeded and the profile was successfully patched.
        400:
          description: |
            The operation failed because the request body was malformed,
            invalid, or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was denied because the user is not an administrator
            and does not own the profile being updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the indicated username could not be
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /tanks:
    get:
      tags:
        - Tanks
      summary: List tanks
      operationId: listTanks
      security: []
      responses:
        200:
          description: Operation succeeded.
    post:
      tags:
        - Tanks
      summary: Create tank
      operationId: createTank
      security:
        - SessionCookie: [admin]
      responses:
        200:
          description: Operation succeeded.

  /tanks/{tankId}:
    parameters:
      - $ref: '#/components/parameters/TankIdParameter'
    get:
      tags:
        - Tanks
      summary: Get tank
      operationId: getTank
      security: []
      responses:
        200:
          description: Operation succeeded.
    put:
      tags:
        - Tanks
      summary: Update tank
      operationId: updateTank
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      responses:
        204:
          description: Operation succeeded.
    patch:
      tags:
        - Tanks
      summary: Patch tank
      operationId: patchTank
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      responses:
        204:
          description: Operation succeeded.
    delete:
      tags:
        - Tanks
      summary: Delete tank
      operationId: deleteTank
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      responses:
        204:
          description: Operation succeeded.

  /users:
    get:
      tags:
        - Users
      summary: List users
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      operationId: listUsers
      description: Lists user accounts given a search criteria.
      parameters:
        - in: query
          name: query
          description: |
            A text string that will be searched for amongst the user data.
          required: false
          schema:
            type: string
        - in: query
          name: role
          description: |
            Filters users to only show the indicated role.
            * 100 = Regular user
            * 200 = Administrator
          required: false
          schema:
            type: number
            format: int32
            enum:
              - 100
              - 200
        - in: query
          name: sortBy
          description: |
            The field on which the the results should be sorted. For text-based searches,
            it is best to omit this parameter to get results in order of relevance.
          required: false
          schema:
            type: string
            enum:
              - memberSince
              - username
        - in: query
          name: sortOrder
          description: The order in which the results should be returned.
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: skip
          description: |
            Indicates how many results should be skipped over. (Useful for paging results.)
            Minimum value is `0`.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: |
            Indicates the maximum number of results to return in the current request. Must be at least `1` and no greater than `200`.
            The default is `100`.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
      responses:
        200:
          description: |
            The request succeeded and the request body will contain an array of users
            matching the search criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int32
                    description: The number of results returned in the query.
                    example: 20
                  results:
                    type: array
                    description: The user accounts found matching the query.
                    items:
                      $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ValidationErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/AdminOnlyErrorResponse'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}:
    get:
      tags:
        - Users
      summary: Get user
      operationId: getUser
      description: |
        Will attempt to retrieve a user's account information.
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      responses:
        200:
          description: |
            The request succeeded and the user account information is returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/AdminOnlyErrorResponse'
        404:
          description: |
            An account matching the requested username or email address could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'
    head:
      tags:
        - Users
      summary: Head user
      operationId: userExists
      security: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      description: |
        This call can be used to quickly determine if a username or email address is already in use on the site.
      responses:
        200:
          description: Username or email address exists in the database.
        404:
          description: The requested username or email was not found in the database.
        500:
          $ref: '#/components/responses/ServerErrorResponse'
    put:
      tags:
        - Users
      summary: Create user
      operationId: createUser
      security: []
      parameters:
        - in: path
          name: username
          required: true
          description: |
            The username that uniquely identifies the user account to create.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$'
            minLength: 3
            maxLength: 50
      description: |
        Creates a new user account given the provided information.

        **NOTE:** Permissions required may vary depending on what attributes are being set:
        * Any user can create a new account as long as it has a role of "Regular User" (`100`).
        * Only administrators can create a new account with elevated privileges.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 50
                  description: The new user's email address.
                  example: 'bob@gmail.org'
                password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 50
                  pattern: '^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&*()-_+=}{}[\]<>,./?|\\/]).{8,50}$'
                  description: The new user's password. (Must meet strength requirements.)
                  example: 'IN98dwoi)*&(lll'
                profile:
                  description: Any profile information that should be updated.
                  allOf:
                    - $ref: '#/components/schemas/ProfileData'
                role:
                  type: integer
                  format: int32
                  description: |
                    The role to assign to the new account.
                    * 100 = regular user.
                    * 200 = administrator.
                  example: 100
      responses:
        201:
          description: |
            The new account was successfully created.
            The details for the newly-created account will be returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ValidationErrorResponse'
        401:
          description: |
            User attempted to create a new account with elevated privileges but is not currently logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: |
            User attempted to create a new account with elevated privileges but is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        409:
          description: |
            Account creation failed because the requested username or email address is already in use.
            (Check response body for details.)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    required:
                      - message
                      - statusCode
                    properties:
                      message:
                        type: string
                        example: Unable to create new account. Username or email address is already in use.
                      statusCode:
                        type: integer
                        format: int32
                        example: 409
                      details:
                        type: object
                        required:
                          - conflictingField
                        properties:
                          conflictingField:
                            type: string
                            description: The field that was found to be in conflict.
                            example: username
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/changeEmail:
    post:
      tags:
        - Users
      summary: Change email
      operationId: changeEmail
      description: Will attempt to change a user's email address.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newEmail
              properties:
                newEmail:
                  type: string
                  format: email
                  maxLength: 50
                  description: The new email address to assign to the user account.
                  example: newemail@otherprovider.org
      responses:
        204:
          description: The email address was successfully changed.
        400:
          description: The new email address was not a valid address or the request body was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was denied because a non-admin user attempted to change another user's email address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The indicated user account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        409:
          description: |
            The email address could not be changed because the new address is already in use by another user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    required:
                      - message
                      - statusCode
                    properties:
                      message:
                        type: string
                        example: 'Unable to change email addres. New email is already in use.'
                      statusCode:
                        type: integer
                        format: int32
                        example: 409
                      details:
                        type: object
                        required:
                          - conflictingField
                        properties:
                          conflictingField:
                            type: string
                            example: 'newEmail'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/changePassword:
    post:
      tags:
        - Users
      summary: Change password
      operationId: changePassword
      description: |
        Will attempt to change a user's password.

        The `oldPassword` parameter is required _if_
        * the user already has a password set on thier account and
        * the user is not an administrator.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  description: |
                    The user's old (current) password that will be replaced.

                    This value must be correct in order for the operation to succeed. It can be omitted if
                    * the user does not yet have a password set on their account yet or
                    * the user is an administrator.
                newPassword:
                  type: string
                  format: password
                  pattern: '^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&*()-_+=}{}[\]<>,./?|\\/]).{8,50}$'
                  minLength: 8
                  maxLength: 50
                  description: The new password to assign to the user account.
      responses:
        204:
          description: The password was successfully changed.
        400:
          description: The new password did not meet strength requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was denied because a non-admin user attempted to change another user's password or the `oldPassword` was incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The indicated user account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/changeRole:
    post:
      tags:
        - Users
      summary: Change role
      operationId: changeRole
      description: |
        Will attempt to change a user's role in order to change their permission level. Only administrators are permitted to use this API endpoint.
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newRole
              properties:
                newRole:
                  type: integer
                  format: int32
                  description: |
                    The new role to assign to the user's account.

                    * 100 = Regular user
                    * 200 = Administrator
                  enum:
                    - 100
                    - 200
      responses:
        204:
          description: The role was updated successfully.
        400:
          description: The new role was invalid or the request body was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: The request was denied because the user is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The request was denied because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/changeUsername:
    post:
      tags:
        - Users
      summary: Change username
      operationId: changeUsername
      description: |
        Changes a user's username.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newUsername
              properties:
                newUsername:
                  type: string
                  pattern: '^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$'
                  minLength: 3
                  maxLength: 50
                  description: The new username to assign to the user's account.
                  example: maryj_46
      responses:
        204:
          description: The username was updated successfully.
        400:
          description: The request was denied because the new username was invalid or the request body was malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: The request was denied because the user is not an administrator and attempted to change another user's username.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The request was denied because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        409:
          description: The request was denied because the username is already taken by another user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    required:
                      - message
                      - statusCode
                    properties:
                      message:
                        type: string
                        example: 'Unable to change username. New username is already in use.'
                      statusCode:
                        type: number
                        format: int32
                        example: 409
                      details:
                        type: object
                        required:
                          - conflictingField
                        properties:
                          conflictingField:
                            type: string
                            example: 'newUsername'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/lockAccount:
    post:
      tags:
        - Users
      summary: Lock account
      operationId: lockAccount
      description: |
        Locks a user's account and immediately ends all active sessions for that user.

        Only administrators may call this API endpoint.
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      responses:
        204:
          description: The user account was successfully locked.
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: The request was denied because the user is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The request was denied because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/requestEmailVerification:
    post:
      tags:
        - Users
      summary: Request email verification
      operationId: requestEmailVerification
      description: |
        Requests that an email be sent to the user with a token to verify their
        email address.

        The token can later be provided to the `/users/{username}/verifyEmail` route to complete the operation.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      responses:
        200:
          description: |
            Indicates that the request was received and the response body will indicate whether an email was
            succussfully sent to the user.
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                properties:
                  succeeded:
                    type: boolean
                    description: |
                      Indicates whether the email was sent. Will be `true` if the email was sent successfully and `false
                      if the email could not be sent because the user does not yet have an email address saved in their
                      profile.
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was rejected because a non-administrator user attempted to request a verification email
            on behalf of another user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The request failed because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/requestPasswordReset:
    post:
      tags:
        - Users
      summary: Request password reset
      operationId: requestPasswordReset
      description: |
        Requests that an email be sent to the indicated user with a token that can be used to reset
        the user's password. (The token can be supplied to the `/users/{username}/resetPassword` route to complete
        the operation.)
      security: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      responses:
        200:
          description: |
            The request was received and the response body will indicate whether the email was
            successfully sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  succeeded:
                    type: boolean
                    description: |
                      Indicates whether the email was successfully sent or not. Will be `true` if the email was sent
                      or `false` if the email could not be sent because the user currently does not have an email address
                      on their account.
        404:
          description: The request was rejected because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/resetPassword:
    post:
      tags:
        - Users
      summary: Reset password
      operationId: resetPassword
      description: |
        Attempts to reset a forgotten password.
      security: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  description: |
                    The reset token returned from a previous call to `/users/{username}/requestPasswordReset`.
                  example: 'VHVK-15D0s4fxGzFJzsSIClXVtJY71jDVhngRhSqOvg'
                newPassword:
                  type: string
                  format: password
                  pattern: '^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~`!@#$%^&*()-_+=}{}[\]<>,./?|\\/]).{8,50}$'
                  description: The new password to apply to the user's account.
                  example: 'q9]=qX%k,4tH5xM8]%%v'
      responses:
        200:
          description: The request was received and the response body will indicate if the password was successfully changed.
          content:
            application/json:
              schema:
                type: object
                required:
                  - succeeded
                properties:
                  succeeded:
                    type: boolean
                    description: |
                      Indicates whether or not the password was reset. Will return `true` if the password was successfully changed.
                      Otherwise, will return `false` if the token was incorrect, expired, or non-existent.
        400:
          description: |
            The request was rejected because the request body was malformed or the new password did not meet strength requirements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        404:
          description: |
            The request was rejected because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/unlockAccount:
    post:
      tags:
        - Users
      summary: Unlock account
      operationId: unlockAccount
      description: |
        Unlocks a user's account that was previously suspended.

        Only administrators may call this API endpoint.
      security:
        - Jwt: [admin]
        - SessionCookie: [admin]
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
      responses:
        204:
          description: The user account was successfully unlocked.
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: The request was denied because the user is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: The request was denied because the indicated username could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/notifications:
    get:
      tags:
        - Users
        - Notifications
      summary: List notifications
      operationId: listNotifications
      description: |
        List notifications for the indicated user. Notifications will be
        returned ordered by posted date. (Newest to oldest.)
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
        - in: query
          name: skip
          required: false
          description: |
            The number of notifications to skip over before returning
            the result set.
          schema:
            type: number
            format: int32
            minimum: 0
            default: 0
        - in: query
          name: limit
          required: false
          description: The number of notifications to return in the result set.
          schema:
            type: number
            format: int32
            minimum: 1
            maximum: 500
            default: 100
      responses:
        200:
          description: |
            The request succeeded and a list of notifications was
            successfully returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: number
                    format: int32
                    description: The number of notifications returned in the query.
                    example: 1
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                    description: The notifications that were returned in the query.
        400:
          description: The request was denied because the query string was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request was rejected because the user is not an administrator
            or is not signed in as the user whose notifications
            are being requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the indicated user could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /users/{username}/notifications/{notificationId}:
    delete:
      tags:
        - Users
        - Notifications
      summary: Dismiss notification
      operationId: dismissNotification
      description: |
        Dismisses (deletes) a specified notification.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/UsernameParameter'
        - in: path
          name: notificationId
          required: true
          description: The ID of the user's notification.
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Notification was successfully deleted.
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: The request was denied because the user is not an administrator or does not own the notification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the indicated username or notification
            ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /diveSites:
    get:
      tags:
        - Dive Sites
      summary: Search dive sites
      operationId: searchDiveSites
      description: |
        Performs a search for dive sites matching the given criteria.
      security: []
      parameters:
        - in: query
          name: query
          description: |
            A search query for performing a text-based search. The result set
            will contain dive sites matching the search query.
          example: Shipwreck
          schema:
            type: string
            maxLength: 200
        - in: query
          name: location
          description: |
            The geographical location around which to search for sites.

            * Must be formatted as `<latitude>,<longitude>`.
            * `<latitude>` must be a number between -90.0 and 90.0.
            * `<longitude>` must be a number between -180.0 and 180.0.
          schema:
            type: string
            example: '20.3460942599771,-87.0260668489514'
        - in: query
          name: radius
          description: |
            The search radius (in kilometers) around `location` for which
            results will be returned.

            The `radius` parameter will be ignored if the `location` parameter
            is omitted.
          schema:
            type: number
            format: float
            minimum: 0
            maximum: 500.0
            default: 50.0
        - in: query
          name: freeToDive
          description: |
            Filters results to show either free-to-dive sites or sites with
            a fee.
            * `true` will return sites marked as "free-to-dive".
            * `false` will return sites marked as having a fee to dive.
            * If omitted, the results will not be filtered.
          schema:
            type: boolean
        - in: query
          name: shoreAccess
          description: |
            Filters results to show either sites with shore-access or those
            that require a boat to reach.
            * `true` will return only sites with shore access.
            * `false` will return only sites that require a boat to access.
            * If omitted, the results will not be filtered.
          schema:
            type: boolean
        - in: query
          name: sortBy
          description: |
            Indicates the field on which the results should be sorted.
          schema:
            type: string
            enum:
              - name
              - rating
            default: name
        - in: query
          name: sortOrder
          description: |
            Indicates whether the results should be returned in ascending or
            descending order.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - in: query
          name: skip
          description: |
            The number of results to skip over before returning a result set.
            (Use for pagination.)
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: limit
          description: The number of results to return in the result set.
          schema:
            type: integer
            format: int32
            default: 50
            minimum: 1
            maximum: 500
      responses:
        200:
          description: |
            The request succeeded and the response body will contain the
            list of dive sites requested.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - sites
                properties:
                  results:
                    type: number
                    format: int32
                    example: 1
                    description: |
                      Number of dive sites returned in the result set.
                  sites:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/DiveSiteId'
                        - $ref: '#/components/schemas/DiveSiteSummary'

        400:
          description: |
            The request was rejected because the query string was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    post:
      tags:
        - Dive Sites
      summary: Create dive site
      operationId: createDiveSite
      description: Creates a new dive site.
      security:
        - Jwt: []
        - SessionCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiveSite'
      responses:
        201:
          description: |
            The new dive site was successfully created. It will be returned
            in the response body with its unique ID which can be used to
            reference it in later requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteWithId'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /diveSites/{siteId}:
    get:
      tags:
        - Dive Sites
      summary: Get dive site
      operationId: getDiveSite
      security: []
      description: Gets a dive site.
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
      responses:
        200:
          description: |
            The request succeeded and the dive site information will be
            returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteWithId'
        404:
          description: The requested site ID could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    put:
      tags:
        - Dive Sites
      summary: Update dive site
      operationId: updateDiveSite
      description: |
        Updates a dive site.
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
      security:
        - Jwt: []
        - SessionCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiveSite'
      responses:
        200:
          description: The dive site was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteWithId'
        400:
          description: |
            The request failed because the request body was invalid or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request failed because the user is not authorized to modify
            the dive site entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the dive site ID could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    patch:
      tags:
        - Dive Sites
      summary: Patch dive site
      operationId: patchDiveSite
      description: |
        Updates a dive site. Unlike the `PUT` operation, the `PATCH` operation
        will only update the fields present in the request body.
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
      security:
        - Jwt: []
        - SessionCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiveSite'
      responses:
        200:
          description: The dive site was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteWithId'
        400:
          description: |
            The request failed because the request body was invalid or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request failed because the user is not authorized to modify
            the dive site entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because the dive site ID could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /diveSites/{siteId}/reviews:
    get:
      tags:
        - Dive Sites
      summary: List dive site reviews
      operationId: listDiveSiteReviews
      description: |
        Lists the reviews for the indicated dive site.
      security: []
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
        - in: query
          name: min
          description: |
            Filters the result set to return only ratings greater than or equal
            to `min`.
          schema:
            type: number
            format: float
            default: 1.0
            minimum: 1.0
            maximum: 5.0
            example: 3.5
        - in: query
          name: max
          description: |
            Filters the result set to return only ratings less than or equal
            to `max`.
          schema:
            type: number
            format: float
            default: 5.0
            minimum: 1.0
            maximum: 5.0
            example: 4.5
        - in: query
          name: sortBy
          description: |
            Indicates the field on which the results should be ordered.
          schema:
            type: string
            enum:
              - date
              - rating
            default: date
        - in: query
          name: sortOrder
          description: |
            Indicates the order in which the results should be returned.
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: skip
          description: |
            Indicates the number of results that should be skipped before
            returning a result set. (Use for pagination.)
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - in: query
          name: limit
          description: |
            Indicates the number of results to return in the result set.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500
            default: 100
      responses:
        200:
          description: |
            The request succeeded and the response body will contain the result
            set.
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - reviews
                properties:
                  results:
                    description: The number of results returned.
                    type: integer
                    format: int32
                    example: 1
                  reviews:
                    description: |
                      An array containing the result set matching
                      the query.
                    type: array
                    items:
                      $ref: '#/components/schemas/DiveSiteReview'
        400:
          description: |
            The request failed because the query string was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    post:
      tags:
        - Dive Sites
      summary: Create dive site review
      operationId: createDiveSiteReview
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
      description: Posts a new dive site review.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiveSiteReviewInfo'
      responses:
        200:
          description: |
            The dive site review was created successfully. The full review
            entity will be returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteReview'
        400:
          description: |
            The request failed because the request body was missing or did
            not pass validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          description: |
            The request failed because the indicated dive site could not be
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        429:
          description: |
            The request was rejected because the user has submitted too many
            reviews. Users may only submit one review per dive site per day.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    required:
                      - message
                      - statusCode
                    properties:
                      message:
                        type: string
                        description: |
                          A message indicating the nature of the error.
                        example: |
                          Unable to submit review. Only one review per dive
                          site per user per day is allowed.
                      statusCode:
                        type: integer
                        format: int32
                        description: |
                          The HTTP status code returned in the response.
                        example: 429
        500:
          $ref: '#/components/responses/ServerErrorResponse'

  /diveSites/{siteId}/reviews/{reviewId}:
    get:
      tags:
        - Dive Sites
      summary: Get dive site review
      operationId: getDiveSiteReview
      description: |
        Retrieves the details of the indicated dive site review.
      security: []
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
        - $ref: '#/components/parameters/DiveSiteReviewIdParameter'
      responses:
        200:
          description: |
            The operation succeeded and the details of the dive site rating
            will be returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteReview'
        404:
          description: |
            The request failed because either the dive site or the dive site
            review could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    put:
      tags:
        - Dive Sites
      summary: Update dive site review
      operationId: updateDiveSiteReview
      description: |
        Updates an existing dive site review.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
        - $ref: '#/components/parameters/DiveSiteReviewIdParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiveSiteReviewInfo'
      responses:
        200:
          description: |
            The request succeeded and the review was successfully updated.
            The updated review data will be returned in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiveSiteReview'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request failed because the user does not own the review and
            is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because either the dive site or the dive
            site review could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

    delete:
      tags:
        - Dive Sites
      summary: Delete dive site review
      operationId: deleteDiveSiteReview
      description: |
        Deletes an existing dive site review.
      security:
        - Jwt: []
        - SessionCookie: []
      parameters:
        - $ref: '#/components/parameters/DiveSiteIdParameter'
        - $ref: '#/components/parameters/DiveSiteReviewIdParameter'
      responses:
        204:
          description: |
            The operation succeeded and the dive site review has been deleted.
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          description: |
            The request failed because the user does not own the review and
            is not an administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        404:
          description: |
            The request failed because either the dive site or the dive
            site review could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          $ref: '#/components/responses/ServerErrorResponse'

components:
  securitySchemes:
    SessionCookie:
      type: apiKey
      name: bottomtime.platform
      in: cookie

    Jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    DiveSiteIdParameter:
      in: path
      name: siteId
      required: true
      description: The ID that uniquely identifies the dive site.
      schema:
        type: string
        format: uuid

    DiveSiteReviewIdParameter:
      in: path
      name: reviewId
      required: true
      description: The ID that uniquely identifies the dive site review.
      schema:
        type: string
        format: uuid

    TankIdParameter:
      in: path
      name: tankId
      required: true
      description: |
        The ID that uniquely identifies the pre-defined tank definition.
      schema:
        type: string
        format: uuid

    UsernameParameter:
      in: path
      name: username
      required: true
      description: |
        The username (or email address) that uniquely identifies the target user account.
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$'
        minLength: 3
        maxLength: 50

  schemas:
    Error:
      type: object
      description: A standard error resposne. This format is used when returning any kind of error.
      required:
        - httpPath
        - httpMethod
      properties:
        httpPath:
          type: string
          description: The HTTP path that the request was made to.
          example: '/profiles/Bob_47'
        httpMethod:
          type: string
          description: The HTTP method that was used in the request.
          example: 'POST'
        username:
          type: string
          description: The username identifying the user that made the request.
          example: 'Rick.M'

    ServerError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - message
            - statusCode
          properties:
            message:
              type: string
              description: The error message. Will provide a brief description of what went wrong.
              example: 'An unexpected server error has occurred.'
            statusCode:
              type: integer
              format: int32
              description: A 500 error code.
              example: 500

    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - message
            - statusCode
          properties:
            message:
              type: string
              description: The error message. Will provide a brief description of what went wrong.
              example: 'The requested resource could not be found.'
            statusCode:
              type: integer
              format: int32
              description: A 404 error code.
              example: 404

    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - message
            - statusCode
          properties:
            message:
              type: string
              description: The error message. Will provide a brief description of what went wrong.
              example: 'Unable to process request. Please log in and try the request again.'
            statusCode:
              type: integer
              format: int32
              description: A 401 error code.
              example: 401

    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - message
            - statusCode
          properties:
            message:
              type: string
              description: The error message. Will provide a brief description of what went wrong.
              example: |
                Requested operation was denied. You are not authorized to perform the requested action.
            statusCode:
              type: integer
              format: int32
              description: A 403 error code.
              example: 403

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          required:
            - message
            - statusCode
          properties:
            message:
              type: string
              description: The error message. Will provide a brief description of what went wrong.
              example: |
                Your request was malformed or contained invalid data.
            statusCode:
              type: integer
              format: int32
              description: A 400 error code.
              example: 400
            details:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                    example: 'First name must be a string'
                  path:
                    type: string
                    example: 'name.firstName'

    Friend:
      type: object
      description: Describes a friend relationship.
      required:
        - username
        - friendsSince
      properties:
        username:
          type: string
        friendsSince:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/ProfileData'

    FriendRequest:
      type: object
      description: Describes a friend request from one user to another.
      required:
        - id
        - from
        - to
        - expires
      properties:
        id:
          type: string
          format: uuid
        from:
          type: string
        to:
          type: string
        expires:
          type: string
          format: date-time

    Notification:
      type: object
      description: Describes a notification
      required:
        - id
        - posted
        - title
        - message
      properties:
        id:
          type: string
          format: uuid
          description: A unique identifier assigned to the notification.
        posted:
          type: string
          format: date-time
          description: The date and time at which the notification was posted.
        title:
          type: string
          example: Friend request accepted!
          description: The title of the notification for quick reading.
        message:
          type: string
          description: |
            The message to be displayed in the notification.
            (May contain HTML.)
          example: |
            User <strong>Simon83</strong> has accepted your friend request!
        expires:
          type: string
          description: |
            The date and time at which point this notification will
            automatically expire. (The notification will be automatically
            deleted once it is expired.)
          format: date-time

    User:
      type: object
      description: Represents a user of the application. This object will capture all of a user's information.
      required:
        - emailVerified
        - hasPassword
        - id
        - isLockedOut
        - memberSince
        - role
        - username
      properties:
        email:
          type: string
          format: email
          description: User's email address. Used for authentication and communication.
          example: micheller_27@gmail.com
        emailVerified:
          description: Indicates whether the user's email address has been verified or not.
          type: boolean
        hasPassword:
          type: boolean
          description: Inidicates whether the user has a password set on their account or not. (Some users may choose to use OAuth to sign in and will not have a password.)
        lastLogin:
          type: string
          description: The time and date (UTC) at which the user was last logged into the application.
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        lastPasswordChange:
          type: string
          description: The time and date (UTC) at which the user last changed or set their password.
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        id:
          type: string
          format: uuid
          description: A globally-unique identifier that can be used to identify the user's account.
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        isLockedOut:
          type: boolean
          description: Indicates whether or not the user's account is currently suspended. (Locked out accounts are prevented from signing in.)
        memberSince:
          type: string
          format: date-time
          description: Date and time (UTC) at which the user's account was first created.
          example: '2016-08-29T09:12:33.001Z'
        profile:
          $ref: '#/components/schemas/Profile'
        role:
          type: integer
          format: int32
          description: The user's security role. 100 = normal user. 200 = admin user.
          example: 100
          enum:
            - 100
            - 200
        username:
          type: string
          description: The user's unique username. This is used for logging in and for retrieving account information.
          example: MichelleR_27

    CurrentUser:
      description: Information on the currently logged-in user.
      allOf:
        - type: object
          required:
            - anonymous
          properties:
            anonymous:
              type: boolean
              description: |
                Indicates if the user is anonymous (not currently authenticated.)
                If true, then the other properties will be omitted.
              example: false
        - $ref: '#/components/schemas/User'

    ProfileData:
      type: object
      description: A user's profile information.
      required:
        - profileVisibility
      properties:
        avatar:
          type: string
          format: uri
          description: A URL to an image that the user chose as their avatar.
          example: 'https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?f=y'
        bio:
          type: string
          description: A brief bit of descriptive text that the user wrote about themselves.
          example: Loves diving. Especially, in water!
          maxLength: 1000
        birthdate:
          type: string
          format: date
          description: The user's birthdate.
        customData:
          type: object
          description: |
            An object containing custom properties and metadata to save with the user's profile.
            This is a free-form dictionary of key-value pairs.
          example: { acceptedCookies: true, likesDiving: true }
        certifications:
          type: array
          description: A collection of certifications that the user has earned.
          items:
            type: object
            required:
              - course
            properties:
              agency:
                type: string
                description: The agency that conferred the certification.
                example: PADI
              course:
                type: string
                description: The name of the course or certification.
                example: Open Water Diver
              date:
                type: string
                format: date
                description: The date on which the certification was earned.
                example: 2016-08-10
        experienceLevel:
          type: string
          maxLength: 50
          description: A brief description of the user's experience level as a diver.
          example: Novice
        location:
          type: string
          maxLength: 200
          description: The user's approximate location.
          example: Vancouver, BC
        name:
          type: string
          maxLength: 100
          description: The user's name. (This will be used a their preferred display name.)
          example: Michelle R.
        profileVisibility:
          type: string
          description: Indicates who is authorized to view this user's profile information.
          enum:
            - private
            - friends
            - public
        startedDiving:
          type: string
          format: date
          pattern: '^\d{4}(-\d{2}(-\d{2})?)?$'
          description: The date on which the user started diving. (Can be approximate. E.g. 2007.)
          example: 2007-04-19
    Profile:
      allOf:
        - type: object
          description: Describes a user's profile information.
          required:
            - memberSince
            - profileVisibility
            - userId
            - username
          properties:
            memberSince:
              type: string
              format: date-time
              description: Date and time (UTC) at which the user's account was first created.
              example: '2016-08-29T09:12:33.001Z'
            userId:
              type: string
              format: uuid
              description: A globally-unique identifier that can be used to identify the user's account.
              example: d290f1ee-6c54-4b01-90e6-d701748f0851
            username:
              type: string
              description: The user's unique username. This is used for logging in and for retrieving account information.
              example: MichelleR_27
        - $ref: '#/components/schemas/ProfileData'

    DiveSiteId:
      type: object
      required:
        - id
        - createdOn
        - averageRating
        - averageDifficulty
      properties:
        id:
          type: string
          format: uuid
          example: 'cb1f3dd4-2d56-428e-a0d3-447d0da3860e'
          description: |
            An ID that uniquely identifies this dive site entry.
        creator:
          type: object
          required:
            - id
            - username
            - displayName
          description: |
            Some basic info on the user who created the dive site record.
          properties:
            id:
              type: string
              format: uuid
              description: The unique ID of the user.
            username:
              type: string
              example: SamTheMan87
              description: The creator's username.
            displayName:
              type: string
              example: Sam Smith
              description: |
                The creator's display name from their profile. (Alternatively,
                this will be their username if they do not have their display
                name set.)
        createdOn:
          type: string
          format: date-time
          description: |
            Date and time on which this dive site entry was created.
        updatedOn:
          type: string
          format: date-time
          description: |
            Date and time on which this dive site entry was last updated.
        averageRating:
          type: number
          format: float
          minimum: 1.0
          maximum: 5.0
          description: |
            The average rating of the site (aggregated from all user ratings.)
        averageDifficulty:
          type: number
          format: float
          minimum: 1
          maximum: 5
          description: |
            The site's difficulty rating (from 1.0 to 5.0.)

    DiveSiteSummary:
      type: object
      description: |
        A partial record of a dive site. Returned in search results.
      required:
        - name
        - creator
        - createdOn
        - location
      properties:
        name:
          type: string
          example: 'Palancar Horseshoe'
          maxLength: 200
          description: |
            The name of the dive site.
        location:
          type: string
          maxLength: 200
          description: |
            The location of the dive site. (City, country, address, etc.)
          example: |
            Cozumel, Mexico
        description:
          type: string
          example: 'This site is amazing! What a beautiful reef!'
          maxLength: 2000
          description: |
            A user-editable description of the dive site.
        depth:
          type: object
          description: |
            The maximum depth of the dive site. A value of `0` is taken to
            mean "bottomless".
          required:
            - depth
            - unit
          properties:
            depth:
              type: number
              format: float
              minimum: 0
              example: 28.2
            unit:
              type: string
              enum:
                - 'm'
                - 'ft'
              example: 'm'
        freeToDive:
          type: boolean
          description: |
            Indicates whether the site is free to dive at or costs
            money to access.
          example: false
        shoreAccess:
          type: boolean
          description: |
            Indicates whether the dive site is accessible from the shore or
            whether a boat will be needed to reach it.
          example: false

    DiveSite:
      type: object
      description: A full record of a dive site.
      allOf:
        - $ref: '#/components/schemas/DiveSiteSummary'
        - type: object
          properties:
            directions:
              type: string
              maxLength: 500
              description: |
                An optional description of how to reach the dive site, if
                necessary.
              example: |
                Take a boat to the indicated GPS coordinates.
            gps:
              type: object
              description: The GPS coordinates of the dive site.
              required:
                - latitude
                - longitude
              properties:
                lat:
                  type: number
                  format: double
                  minimum: -90.0
                  maximum: 90.0
                lon:
                  type: number
                  format: double
                  minimum: -180.0
                  maximum: 180.0

    DiveSiteWithId:
      type: object
      allOf:
        - $ref: '#/components/schemas/DiveSiteId'
        - $ref: '#/components/schemas/DiveSite'

    DiveSiteReviewInfo:
      type: object
      description: Describes a rating and comments on a dive site.
      required:
        - rating
        - title
      properties:
        rating:
          type: number
          description: User's rating for the dive site. (1-5 stars.)
          format: float
          minimum: 1.0
          maximum: 5.0
          example: 4.2
        difficulty:
          type: number
          format: float
          minimum: 1
          maximum: 5
          example: 1.8
          description: |
            The reviewer's difficulty rating for the site (from 1.0 to 5.0).
        comments:
          type: string
          maxLength: 1000
          description: |
            The user's description or comments on the dive site.
          example: |
            This site is great! Tons of life and vegetation and visibility
            was excellent.
        title:
          type: string
          maxLength: 200
          description: |
            A brief title or caption for the review.
          example: |
            Best dive site... evah!!!

    DiveSiteReview:
      type: object
      description: Describes a user rating for a dive site.
      allOf:
        - type: object
          required:
            - id
            - creator
            - createdOn
          properties:
            id:
              type: string
              format: uuid
              description: Uniquely identifies the rating.
            creator:
              type: string
              description: Username of the user who posted the review.
              example: Sam_Dives88
            createdOn:
              type: string
              format: date-time
              description: Date and time at which the rating was first posted.
            updatedOn:
              type: string
              format: date-time
              description: Date and time at which the rating was last updated.
        - $ref: '#/components/schemas/DiveSiteReviewInfo'

  responses:
    AdminOnlyErrorResponse:
      description: The request was denied because the user is not a site administrator.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenError'

    UnauthorizedErrorResponse:
      description: |
        The operation was denied because the user is unauthenticated or did not provide the requisite session cookie or API token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'

    ValidationErrorResponse:
      description: 'The request body or query string was invalid or contained invalid data.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    ServerErrorResponse:
      description: An unhandled server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'
