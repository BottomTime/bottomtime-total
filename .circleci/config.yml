version: 2.1
orbs:
  aws-cli: circleci/aws-cli@5.1.2
  terraform: circleci/terraform@3.5.0

commands:
  yarn_install:
    steps:
      - run: corepack enable --install-directory ~/bin
      - restore_cache:
          keys:
            - bt-modules-{{ checksum "yarn.lock" }}
            - bt-modules-
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          key: bt-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
            - packages/api/node_modules/
            - packages/common/node_modules/
            - packages/e2e-tests/node_modules/
            - packages/emails/node_modules/
            - packages/service/node_modules/
            - packages/web/node_modules/

  deploy_docker:
    steps:
      - aws-cli/install
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Deploy Docker Images
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.us-east-1.amazonaws.com
            docker build -t bottomtime-service -f Dockerfile.service .
            docker tag bottomtime-service:latest $AWS_ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/bottomtime/service:$NODE_ENV-latest
            docker push $AWS_ACCOUNT.dkr.ecr.us-east-1.amazonaws.com/bottomtime/service:$NODE_ENV-latest

  deploy_env:
    parameters:
      fresh_db:
        type: boolean
        default: false
      state_bucket:
        type: string
        default: 'bottomtime-tfstate'
      env:
        type: string
      state_key:
        type: string
      var_file:
        type: string
    steps:
      - aws-cli/install
      - checkout
      - yarn_install
      - attach_workspace:
          at: ./

      # Front-end needs to be recompiled because the appropriate env variables need to be written into the bundle.
      - run:
          name: Bundle Front-end
          working_directory: packages/web/
          command: yarn build --mode <<parameters.env>>

      - run:
          name: Migrate Database
          working_directory: packages/service/
          command: |
            if [[ "<<parameters.fresh_db>>" = "true" ]]; then
              yarn admin db init -d $BT_POSTGRES_URI -sf
            else
              yarn migrate:up
            fi
      - terraform/install:
          terraform_version: '1.9.7'
      - terraform/init:
          backend_config: 'bucket="<<parameters.state_bucket>>",key="<<parameters.state_key>>",region="$AWS_REGION"'
          path: terraform/
      - terraform/validate:
          path: terraform/
      - terraform/apply:
          var_file: <<parameters.var_file>>
          path: terraform/
      - run:
          name: CloudFront Buckets
          working_directory: terraform/
          command: ./deploy-files.sh

jobs:
  build:
    docker:
      - image: cimg/node:22.13
    resource_class: medium+
    environment:
      NODE_ENV: production # Build for production for minified bundles
    steps:
      - checkout
      - yarn_install
      - run:
          name: Download Code Climate coverage tool
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - restore_cache:
          keys:
            - bt-nx-build-{{ .Branch }}
            - bt-nx-build-master
      - run:
          name: Lint and Build
          command: yarn build --stream
      - run:
          name: Generate API Docs
          command: npx lerna run docs --scope=@bottomtime/service
      - save_cache:
          key: bt-nx-build-{{ .Branch }}
          paths:
            - .nx/
      - persist_to_workspace:
          root: ./
          paths:
            - .nx/
            - packages/api/dist/
            - packages/common/dist/
            - packages/edge-authenticator/dist/
            - packages/emails/dist/
            - packages/keepalive/dist/
            - packages/review-aggregates/dist/
            - packages/service/docs/
            - packages/service/dist/
            - packages/web/dist/
            - cc-test-reporter

  test_packages:
    docker:
      - image: cimg/node:22.13
    resource_class: medium
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - yarn_install
      - attach_workspace:
          at: ./
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build

      - run:
          name: Run Tests
          command: |
            yarn test --scope=@bottomtime/{api,common,emails} -- --runInBand --ci

      - store_test_results:
          path: packages/api/reports/
      - store_test_results:
          path: packages/common/reports/
      - store_test_results:
          path: packages/emails/reports/

      - run:
          name: Report API coverage
          working_directory: packages/api/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/api/" \
              -t lcov \
              -o "../../api.coverage.json"
      - run:
          name: Report Common Lib coverage
          working_directory: packages/common/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/common/" \
              -t lcov \
              -o "../../common.coverage.json"
      - run:
          name: Report Email Service coverage
          working_directory: packages/emails/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/emails/" \
              -t lcov \
              -o "../../emails.coverage.json"

      - persist_to_workspace:
          root: ./
          paths:
            - packages/api/coverage/
            - api.coverage.json
            - common.coverage.json
            - emails.coverage.json

  test_service:
    docker:
      - image: cimg/node:22.13
      - image: postgis/postgis:14-3.4-alpine
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: bt_user
          POSTGRES_PASSWORD: bt_admin1234
      - image: redis:7.4-alpine3.20
      - image: localstack/localstack
        environment:
          - SERVICES=s3,sqs,ses
    resource_class: medium+
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - yarn_install
      - attach_workspace:
          at: ./
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - aws-cli/install
      - run:
          name: Initialize LocalStack
          command: |
            aws s3api create-bucket --endpoint-url http://localhost:4566 --bucket media
            aws sqs create-queue  --endpoint-url http://localhost:4566 --queue-name email
            aws sqs create-queue  --endpoint-url http://localhost:4566 --queue-name reviews
      - run:
          name: Run Tests
          working_directory: packages/service/
          command: |
            yarn prepare
            yarn test --ci
      - store_test_results:
          path: packages/service/reports/
      - run:
          name: Report test coverage
          working_directory: packages/service/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/service/" \
              -t lcov \
              -o "../../service.coverage.json" \
      - persist_to_workspace:
          root: ./
          paths:
            - packages/service/coverage/
            - service.coverage.json

  test_web:
    docker:
      - image: cimg/node:22.13-browsers
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
      NODE_OPTIONS: '--max-old-space-size=8192'
    parallelism: 3
    steps:
      - checkout
      - yarn_install
      - attach_workspace:
          at: ./
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - run:
          name: Run Tests
          command: |
            yarn test --scope=@bottomtime/web --stream -- --runInBand --ci --shard $(($CIRCLE_NODE_INDEX+1))/$CIRCLE_NODE_TOTAL
      - store_test_results:
          path: packages/web/reports/
      - run:
          name: Report test coverage
          working_directory: packages/web/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/web/" \
              -t lcov \
              -o "../../web-$CIRCLE_NODE_INDEX.coverage.json" \
      - persist_to_workspace:
          root: ./
          paths:
            - packages/web/coverage/
            - web-0.coverage.json
            - web-1.coverage.json
            - web-2.coverage.json

  test_e2e:
    docker:
      - image: cimg/node:22.13-browsers
    resource_class: medium
    environment:
      BT_POSTGRES_REQUIRE_SSL: 'true'
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - yarn_install
      - attach_workspace:
          at: ./
      - run:
          name: Run end-to-end tests
          working_directory: packages/e2e-tests/
          command: |
            yarn prepare && yarn test
      - store_test_results:
          path: ./packages/e2e-tests/test-results/
      - store_artifacts:
          path: ./packages/e2e-tests/test-results/

  report_coverage:
    docker:
      - image: cimg/node:22.13
    resource_class: medium
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - run:
          name: Report coverage
          command: |
            ./cc-test-reporter sum-coverage -o codeclimate.json -p 7 *.coverage.json
            ./cc-test-reporter upload-coverage -i codeclimate.json

  docker_e2e:
    docker:
      - image: cimg/base:2023.06
    resource_class: arm.medium
    environment:
      NODE_ENV: e2e
    steps:
      - deploy_docker

  deploy_e2e:
    docker:
      - image: cimg/node:22.13
    environment:
      BT_POSTGRES_REQUIRE_SSL: 'true'
    resource_class: medium
    steps:
      - deploy_env:
          env: e2e
          fresh_db: true
          state_key: $AWS_REGION.e2e.tfstate
          var_file: vars/e2e.tfvars

  docker_staging:
    docker:
      - image: cimg/base:2023.06
    resource_class: arm.medium
    environment:
      NODE_ENV: staging
    steps:
      - deploy_docker

  deploy_staging:
    docker:
      - image: cimg/node:22.13
    environment:
      BT_POSTGRES_REQUIRE_SSL: 'true'
    resource_class: medium
    steps:
      - deploy_env:
          env: staging
          state_key: $AWS_REGION.staging.tfstate
          var_file: vars/staging.tfvars

  docker_production:
    docker:
      - image: cimg/base:2023.06
    resource_class: arm.medium
    environment:
      NODE_ENV: production
    steps:
      - deploy_docker

  deploy_production:
    docker:
      - image: cimg/node:22.13
    environment:
      BT_POSTGRES_REQUIRE_SSL: 'true'
    resource_class: medium
    steps:
      - deploy_env:
          env: production
          state_key: $AWS_REGION.production.tfstate
          var_file: vars/production.tfvars

workflows:
  test_and_deploy:
    jobs:
      # 1) Iniitialize and build
      - build
      - docker_e2e:
          requires:
            - build
          context:
            - bt-aws-dev
      - deploy_e2e:
          requires:
            - docker_e2e
          context:
            - bt-aws-dev
            - bt-postgres-e2e
            - bt-smtp-dev

      # 2) Run tests
      - test_packages:
          requires:
            - build
      - test_service:
          requires:
            - build
          context:
            - bt-aws-dev
            - bt-smtp-dev
            - bt-stripe-staging
      - test_web:
          requires:
            - build
      - test_e2e:
          requires:
            - deploy_e2e
          context:
            - bt-aws-e2e
            - bt-smtp-dev
            - bt-postgres-e2e
            - bt-edge-auth

      # 3) Report test coverage
      - report_coverage:
          requires:
            - test_packages
            - test_service
            - test_web

      # 4) Deployment (branch dependent)
      - docker_staging:
          requires:
            - report_coverage
            - test_e2e
          context:
            - bt-aws-dev
          filters:
            branches:
              only:
                - master
      - deploy_staging:
          requires:
            - docker_staging
          context:
            - bt-aws-dev
            - bt-postgres-staging
            - bt-smtp-dev

      - docker_production:
          requires:
            - report_coverage
            - test_e2e
          context:
            - bt-aws-dev
          filters:
            branches:
              only:
                - production
      - deploy_production:
          requires:
            - docker_production
          context:
            - bt-aws-dev
            - bt-postgres-prod
            - bt-smtp-dev
