version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-s3: circleci/aws-s3@3.1.1
  cypress: cypress-io/cypress@3.1.2
  node: circleci/node@5.1.0
  terraform: circleci/terraform@3.2.1

commands:
  install_node:
    parameters:
      app_path:
        type: string
    steps:
      - node/install:
          install-yarn: true
          node-version: '18'
      - node/install-packages:
          app-dir: <<parameters.app_path>>
          pkg-manager: 'yarn'

  publish_distro:
    parameters:
      bucket:
        type: string
      distribution_id:
        type: string
      env:
        type: string
      path:
        type: string
    steps:
      - aws-s3/sync:
          install-aws-cli: false
          from: <<parameters.path>>
          to: 's3://bt-$AWS_REGION-<<parameters.env>>-<<parameters.bucket>>-distro'
      - run:
          name: Invalidate distribution cache
          command: aws cloudfront create-invalidation --distribution-id <<parameters.distribution_id>> --paths "/*"

  prepare_coverage_reporting:
    steps:
      - run:
          name: Install Code Climate binary
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build

  record_coverage:
    parameters:
      coverage_file:
        type: string
      coverage_root:
        type: string
    steps:
      - run:
          name: Report test coverage
          working_directory: <<parameters.coverage_root>>
          command: |
            ../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "<<parameters.coverage_root>>" \
              -t lcov \
              -o "../<<parameters.coverage_file>>" \

jobs:
  test_core:
    docker:
      - image: cimg/base:2023.04
      - image: mongo:5.0
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - install_node:
          app_path: ./service/
      - prepare_coverage_reporting
      - run:
          name: Lint, Build, and Test
          working_directory: ./service/
          command: |
            yarn lint
            yarn build
            yarn test
      - record_coverage:
          coverage_file: service_coverage.json
          coverage_root: service/
      - store_test_results:
          path: ./service/reports/
      - store_artifacts:
          path: ./service/logs/
          destination: logs/
      - persist_to_workspace:
          root: .
          paths:
            - cc-test-reporter
            - service_coverage.json

  build_web:
    docker:
      - image: cimg/base:2023.04
    steps:
      - checkout
      - install_node:
          app_path: ./web/
      - prepare_coverage_reporting
      - run:
          name: Lint, Build, and Test
          working_directory: ./web/
          command: |
            yarn lint
            yarn build
            yarn test
      - record_coverage:
          coverage_file: web_coverage.json
          coverage_root: web/
      - store_test_results:
          path: ./web/reports/
      - persist_to_workspace:
          root: .
          paths:
            - web/dist/
            - web_coverage.json

  upload_coverage:
    docker:
      - image: cimg/base:2023.04
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Report coverage
          command: |
            ./cc-test-reporter sum-coverage -o codeclimate.json -p 2 service_coverage.json web_coverage.json
            ./cc-test-reporter upload-coverage -i codeclimate.json

  build_docs:
    docker:
      - image: cimg/base:2023.04
    steps:
      - checkout
      - install_node:
          app_path: ./docs/
      - run:
          name: Validate specs
          working_directory: ./docs/
          command: yarn validate
      - run:
          name: Build
          working_directory: ./docs/
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - docs/dist/

  migrate_database:
    docker:
      - image: cimg/base:2023.04
    steps:
      - checkout
      - install_node:
          app_path: ./service/
      - run:
          name: Migrate database
          working_directory: ./service/
          command: yarn migrate up

  deploy_core_image:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    parameters:
      env:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Build and push Docker image
          working_directory: ./service/
          command: |
            docker build -t bt/<<parameters.env>>/core .

            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            docker tag bt/<<parameters.env>>/core:latest $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:latest
            docker tag bt/<<parameters.env>>/core:latest $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:build$CIRCLE_BUILD_NUM

            docker push $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:latest
            docker push $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:build$CIRCLE_BUILD_NUM
      - run:
          name: Save build number
          command: |
            echo 'image_tag = "'build$CIRCLE_BUILD_NUM'"' >> build.tfvars
            echo "" >> build.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - build.tfvars

  test_end_to_end:
    docker:
      - image: cimg/node:18.16-browsers
      - image: mongo:5.0
    parameters:
      env:
        type: string
    steps:
      - cypress/install:
          install-command: npx cypress install
          package-manager: yarn
          working-directory: ./web/
      - run:
          name: Start Core Server
          working_directory: ./service/
          command: |
            yarn install
            yarn build
            yarn daemon:start
      - cypress/run-tests:
          cypress-command: yarn test:e2e --headless
          working-directory: ./web/

  terraform:
    docker:
      - image: cimg/base:2023.04
    parameters:
      env:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ./terraform/vars
      - terraform/install:
          terraform_version: '1.4.5'
      - terraform/validate:
          path: ./terraform/
      - terraform/apply:
          backend_config: 'bucket=bottomtime-tfstate,key=$AWS_REGION.<<parameters.env>>.tfstate'
          path: ./terraform/
          var_file: vars/<<parameters.env>>.tfvars,vars/build.tfvars
      - run:
          name: Store distribution names
          working_directory: ./terraform/
          command: |
            terraform output -raw site_distribution > site_distribution
            terraform output -raw docs_distribution > docs_distribution
      - persist_to_workspace:
          root: ./terraform/
          paths:
            - site_distribution
            - docs_distribution

  publish_distros:
    docker:
      - image: cimg/base:2023.04
    parameters:
      env:
        type: string
    steps:
      - aws-cli/install
      - attach_workspace:
          at: .
      - publish_distro:
          bucket: docs
          distribution_id: $(cat docs_distribution)
          env: <<parameters.env>>
          path: ./docs/dist/
      - publish_distro:
          bucket: web
          distribution_id: $(cat site_distribution)
          env: <<parameters.env>>
          path: ./web/dist/

workflows:
  test_and_deploy:
    jobs:
      - test_core
      - build_web
      - build_docs
      - upload_coverage:
          context:
            - bt-code-climate
          requires:
            - test_core
            - build_web

      # Dev environment
      - migrate_database:
          name: migrate_database_dev
          context:
            - bt-mongo-dev
          filters:
            branches:
              only:
                - master
          requires:
            - test_core
            - build_web

      - deploy_core_image:
          name: deploy_core_image_dev
          env: 'dev'
          context:
            - bt-aws-dev
          filters:
            branches:
              only:
                - master
          requires:
            - test_core
            - build_web

      - test_end_to_end:
          name: test_e2e_dev
          env: dev
          context:
            - bt-aws-dev
          # filters:
          #   branches:
          #     only:
          #       - master
          # requires:
          #   - deploy_core_image_dev
          #   - migrate_database_dev

      - terraform:
          name: terraform_dev
          env: 'dev'
          context:
            - bt-aws-dev
          filters:
            branches:
              only:
                - master
          requires:
            - test_e2e_dev

      - publish_distros:
          name: deploy_distros_dev
          env: 'dev'
          context:
            - bt-aws-dev
          filters:
            branches:
              only:
                - master
          requires:
            - terraform_dev
            - build_docs
            - build_web
