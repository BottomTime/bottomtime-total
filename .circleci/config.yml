version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-s3: circleci/aws-s3@3.1.1
  node: circleci/node@5.1.0
  terraform: circleci/terraform@3.2.1

docker_node: &node_image
  - image: cimg/node:18.16.1-browsers
  - image: mongo:5.0

docker_base: &base_image
  - image: cimg/base:2023.04

commands:
  install_node:
    steps:
      - node/install:
          install-yarn: true
          node-version: '18'
      - node/install-packages:
          pkg-manager: 'yarn'

  publish_distro:
    parameters:
      bucket:
        type: string
      distribution_id:
        type: string
      env:
        type: string
      path:
        type: string
    steps:
      - aws-s3/sync:
          install-aws-cli: false
          from: <<parameters.path>>
          to: 's3://bt-$AWS_REGION-<<parameters.env>>-<<parameters.bucket>>-distro'
      - run:
          name: Invalidate distribution cache
          command: aws cloudfront create-invalidation --distribution-id <<parameters.distribution_id>> --paths "/*"

  prepare_coverage_reporting:
    steps:
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build

  record_coverage:
    parameters:
      coverage_file:
        type: string
      coverage_root:
        type: string
    steps:
      - run:
          name: Report test coverage
          working_directory: <<parameters.coverage_root>>
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "<<parameters.coverage_root>>" \
              -t lcov \
              -o "../../<<parameters.coverage_file>>" \

  init_testing:
    steps:
      - checkout
      - install_node
      - attach_workspace:
          at: ./
      - prepare_coverage_reporting

jobs:
  init_and_lint:
    docker:
      - image: cimg/node:18.19
    steps:
      - checkout
      - restore_cache:
          keys:
            - bt-{{ checksum "yarn.lock" }}
            - bt-
      - run:
          name: Install dependencies
          command: yarn install
      - run:
          name: Download Code Climate coverage tool
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - save_cache:
          key: bt-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/api/node_modules
            - packages/common/node_modules
            - packages/e2e-tests/node_modules
            - packages/service/node_modules
            - packages/vite/node_modules
      - run:
          name: Lint
          command: yarn lint
      - persist_to_workspace:
          root: ./
          paths:
            - cc-test-reporter

  test_service:
    docker:
      - image: cimg/node:18.19
      - image: mongo:5.0
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - restore_cache:
          keys:
            - bt-{{ checksum "yarn.lock" }}
            - bt-
      - run:
          name: Install dependencies
          command: yarn
      - attach_workspace:
          at: ./
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - run:
          name: Build and Test
          command: npx lerna run build,test --scope @bottomtime/core --stream # --since=master
      - store_test_results:
          path: packages/service/reports/
      - run:
          name: Report test coverage
          working_directory: packages/service/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/service/" \
              -t lcov \
              -o "../../service.coverage.json" \
      - persist_to_workspace:
          root: ./
          paths:
            - packages/service/dist/
            - packages/service/coverage/
            - service.coverage.json

  test_web:
    docker:
      - image: cimg/node:18.19
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - restore_cache:
          keys:
            - bt-{{ checksum "yarn.lock" }}
            - bt-
      - run:
          name: Install dependencies
          command: yarn
      - attach_workspace:
          at: ./
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - run:
          name: Build and Test
          command: npx lerna run build,test --scope @bottomtime/vite --stream # --since=master
      - store_test_results:
          path: packages/web/reports/
      - run:
          name: Report test coverage
          working_directory: packages/vite/
          command: |
            ../../cc-test-reporter format-coverage "coverage/lcov.info" \
              --add-prefix "packages/vite/" \
              -t lcov \
              -o "../../web.coverage.json" \
      - persist_to_workspace:
          root: ./
          paths:
            - packages/vite/dist/
            - packages/vite/coverage/
            - web.coverage.json

  test_e2e:
    docker:
      - image: cimg/node:18.19-browsers
      - image: mongo:5.0
    environment:
      BT_MONGO_URI: mongodb://localhost:27017/ci
      JEST_JUNIT_OUTPUT_DIR: ./reports/
    steps:
      - checkout
      - restore_cache:
          keys:
            - bt-{{ checksum "yarn.lock" }}
            - bt-
      - run:
          name: Install dependencies
          command: yarn
      - attach_workspace:
          at: ./
      - run:
          name: Run end-to-end tests
          working_directory: packages/e2e-tests/
          command: yarn test
      - store_test_results:
          path: ./packages/e2e-tests/test-results/

  report_coverage:
    docker:
      - image: cimg/node:18.19
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Initialize Code Climate
          command: ./cc-test-reporter before-build
      - run:
          name: Report coverage
          command: |
            ./cc-test-reporter sum-coverage -o codeclimate.json -p 2 *.coverage.json
            ./cc-test-reporter upload-coverage -i codeclimate.json

  deploy_core_image:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    parameters:
      env:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Build and push Docker image
          working_directory: ./packages/service/
          command: |
            docker build -t bt/<<parameters.env>>/core .

            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            docker tag bt/<<parameters.env>>/core:latest $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:latest
            docker tag bt/<<parameters.env>>/core:latest $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:build$CIRCLE_BUILD_NUM

            docker push $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:latest
            docker push $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_REGION.amazonaws.com/bt/<<parameters.env>>/core:build$CIRCLE_BUILD_NUM
      - run:
          name: Save build number
          command: |
            echo 'image_tag = "'build$CIRCLE_BUILD_NUM'"' >> build.tfvars
            echo "" >> build.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - build.tfvars

  migrate_database:
    docker:
      - image: cimg/base:2023.04
    steps:
      - checkout
      - install_node
      - run:
          name: Migrate database
          working_directory: ./packages/service/
          command: yarn migrate up

  terraform:
    docker: *base_image
    parameters:
      env:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ./terraform/vars
      - terraform/install:
          terraform_version: '1.4.5'
      - terraform/validate:
          path: ./terraform/
      - terraform/apply:
          backend_config: 'bucket=bottomtime-tfstate,key=$AWS_REGION.<<parameters.env>>.tfstate'
          path: ./terraform/
          var_file: vars/<<parameters.env>>.tfvars,vars/build.tfvars
      - run:
          name: Store distribution names
          working_directory: ./terraform/
          command: |
            terraform output -raw site_distribution > site_distribution
            terraform output -raw docs_distribution > docs_distribution
      - persist_to_workspace:
          root: ./terraform/
          paths:
            - site_distribution
            - docs_distribution

  publish_distros:
    docker: *base_image
    parameters:
      env:
        type: string
    steps:
      - aws-cli/install
      - attach_workspace:
          at: .
      - publish_distro:
          bucket: docs
          distribution_id: $(cat docs_distribution)
          env: <<parameters.env>>
          path: ./packages/docs/public/
      - publish_distro:
          bucket: web
          distribution_id: $(cat site_distribution)
          env: <<parameters.env>>
          path: ./packages/web/dist/

  # Temporary tear down step to save money in AWS...
  teardown:
    docker: *base_image
    parameters:
      env:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ./terraform/vars
      - terraform/install:
          terraform_version: '1.4.5'
      - terraform/destroy:
          backend_config: 'bucket=bottomtime-tfstate,key=$AWS_REGION.<<parameters.env>>.tfstate'
          path: ./terraform/
          var_file: vars/<<parameters.env>>.tfvars,vars/build.tfvars

workflows:
  test_and_deploy:
    jobs:
      # Validate
      - init_and_lint
      - test_service:
          requires:
            - init_and_lint
      - test_web:
          requires:
            - init_and_lint
      - test_e2e:
          requires:
            - init_and_lint
      - report_coverage:
          requires:
            - test_service
            - test_web

      # - lint_and_build
      # - test_core:
      #     requires:
      #       - lint_and_build
      # - test_web:
      #     requires:
      #       - lint_and_build
      # - test_e2e:
      #     requires:
      #       - lint_and_build
      # - report_coverage:
      #     requires:
      #       - test_core
      #       - test_web

      # Deploy dev environment
      # - deploy_core_image:
      #     name: deploy_dev_image
      #     env: dev
      #     context:
      #       - bt-aws-dev
      #     requires:
      #       - test_core
      #       - test_web
      #       - test_e2e
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - migrate_database:
      #     name: migrate_dev_database
      #     context:
      #       - bt-mongo-dev
      #     requires:
      #       - deploy_dev_image
      # - terraform:
      #     name: terraform_dev
      #     env: dev
      #     context:
      #       - bt-aws-dev
      #     requires:
      #       - deploy_dev_image
      # - publish_distros:
      #     name: publish_dev_distros
      #     env: dev
      #     context:
      #       - bt-aws-dev
      #     requires:
      #       - terraform_dev
      # - teardown:
      #     name: teardown_dev
      #     env: dev
      #     context:
      #       - bt-aws-dev
      #     requires:
      #       - publish_dev_distros
